
;public function (list :list  expected) {
    ;0 =appearances
    ;list
    |browse(elem) {
        elem =? expected
        |branch {appearances +1 => appearances;} {}
    }
    ;appearances
}
=count

;public function(expected) {
    function (list) {
        ;0 =appearances
        ;list
        |browse(elem) {
            elem =? expected
            |branch {appearances +1 => appearances;} {}
        }
        ;appearances
    }
}
=count_

/// range is [start_inclusive  end_exclusive]
/// return the subrange, or empty array if the range.start >=range.end
;public function(list :list(:any)  range :list(:i64))(:array) {
    {0-1}=i;
    range #1 - {range#0}
    =length <= 0
    |branch {[]} {
        length
        |new_array
        |replace(e) {
            i +1 =>i;
            list #{i + {range#0 }}
        }
    }
}
=subrange;
"this is my long str"
|subrange [8 15]
|assert/array_eq "my long"

;public function(list :list  to_find)(:or(index :i64  if_not_found :nothing)) {
    list |size
    |times_or(i) {
        list #i =?to_find
        |branch {
            i
        } {
        }
    } {
    }
}
=find

;[{
    ;"asdfqwer"
    |find 'z'
    |assert/eq {}
}{
    ;"asdfqwer"
    |find 'q'
    |assert/eq 4
}] |test/count_named "find"



;public function (index_and_value) {
    function(list) {
        ;index_and_value #0 =index
        ;index_and_value #1 =value
        ;0 -1 =i
        ;list
        |replace(e) {
            i +1 =>i =?index |branch {
                value
            } {
                e
            }
        }
    }
}
=set_array_elem2
;"asdf"
|{[1 'q'] |set_array_elem2}
|assert/array_eq "aqdf"

;public function (elems :list  index :i64  value) {
    ;0 -1 =i
    ;elems
    |replace(e) {
        i +1 =>i =?index |branch {
            value
        } {
            e
        }
    }
}
=set_array_elem
;"asdf"
|set_array_elem 1 'q'
|assert/array_eq "aqdf"



;public function(list :list(:any) sep) (parts :list(:list(:any))) {
    ;list |count sep
    +1
    |new_array
    =parts
    ;0 =found
    ;0 =previous
    ;list |size
    |times_or(i) {
        list #i =?sep
        |branch {
            list |subrange [previous i] =part;
            parts |set_array_elem found part;
            i +1 =>previous;
            found +1 => found;
        } {
        }
    } {
        list |subrange [previous {list |size}] =part;
        parts |set_array_elem found part;
    }
    ;parts
}
=split_by



;"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
|split_by ':'
|inspect(r) {
    #0
    |assert/array_eq "Game 1"
}
|inspect(r) {
    #1
    |assert/array_eq " 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
}

;"3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
|split_by ';'
|inspect(r) {
    #0
    |assert/array_eq "3 blue, 4 red"
}
|inspect(r) {
    #1
    |assert/array_eq " 1 red, 2 green, 6 blue"
}
|inspect(r) {
    #2
    |assert/array_eq " 2 green"
}

;public function(list :list(:any) sep) (parts :list(:list(:any))) {
    list |split_by sep
    |filter(e) {
        e |size >0
    }
}
=split_by_non_empty


;public function(actual expected) {
    actual |size =? {expected |size}
    |branch {
        {0 -1} =i
        ;actual
        |browse_or(actual_elem) {
            i +1 => i
            ;expected #i
            =expected_elem
            =?actual_elem
            |branch {
            } {
                0
            }
        } {
            1
        }
    } {
        0
    }
}
=eq

;"asdf"
|eq "asdf"
|assert/eq 1

;"asdf"
|eq "qwer"
|assert/eq 0


;public function(nested :list(:list)) {
    ;[] =accum
    ;nested
    |browse_or(inner) {
        accum ++inner => accum;
    } {
        accum
    }
}
=flatten


;public function (list :list  self) (:list) {
    |size =?0 |branch {
        ;list
    } {
        ;list #0 =pivot
        ;list |filter(e) {>pivot} =greaters
        ;list |filter(e) {<pivot} =lessers
        ;list |filter(e) {==pivot} =pivots
        ;lessers |self self ++pivots {greaters |self self}
    }
}
=sort_rec

;public function (list :list) (:list) {
    |sort_rec sort_rec
}
=sort

;[{
    [] |sort |assert/array_eq []
} {
    [1] |sort |assert/array_eq [1]
} {
    [1 2] |sort |assert/array_eq [1 2]
} {
    [2 1] |sort |assert/array_eq [1 2]
} {
    [2 1 2] |sort |assert/array_eq [1 2 2]
}] |test/count_named "sort"

;public function (as :list  bs :list) (:list(:tuple(first second))) {
    ;0 -1 =i
    ;as |map(a) {
        ;i +1 =>i
        ;[{bs #i} a]
    }
}
=zip

;public function (list :list  index_to_delete) {
    ;0 -1 =i
    ;list |size -1 |new_array |map(e) {
        ;1 +i =>i
        ;i <index_to_delete |branch {list #i} {list #{i+1}}
    }
}
=delete

;[{[1 2 3] |delete 0 |assert/array_eq [2 3]
} {[1 2 3] |delete 1 |assert/array_eq [1 3]
} {[1 2 3] |delete 2 |assert/array_eq [1 2]
}] |test/count_named "delete"

;
