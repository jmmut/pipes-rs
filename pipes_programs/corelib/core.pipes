
;public function(array) {
    ;"[ "
    =message
    ;array
    |browse(elem) {
        message ++{elem |to_str} " " =>message
        ;
    }
    ;message
    ++"]"
}
=int_array_to_str


;public {[27] ++"[31m"} =ANSI_RED
;public {[27] ++"[91;1m"} =ANSI_BOLD_BRIGHT_RED
;public {[27] ++"[32m"} =ANSI_GREEN
;public {[27] ++"[92;1m"} =ANSI_BOLD_BRIGHT_GREEN
;public {[27] ++"[0m"} =ANSI_CLEAR

;public function(tests) {
    tests |size |to_str =total;
    tests |count 0 =failed
    =? 0
    |branch {
        ANSI_BOLD_BRIGHT_GREEN ++"All " ++total ++" tests passed"
    } {
        ANSI_BOLD_BRIGHT_RED ++{failed |to_str} ++"/" ++total ++" test(s) failed"
    }
    ++ANSI_CLEAR
    |print;
}
=count_tests

;public function(expected) {
    function (list) {
        ;0 =appearances
        ;list
        |browse(elem) {
            elem =? expected
            |branch {appearances +1 => appearances;} {}
        }
        ;appearances
    }
}
=count_

;public function (list :list  expected) {
    ;0 =appearances
    ;list
    |browse(elem) {
        elem =? expected
        |branch {appearances +1 => appearances;} {}
    }
    ;appearances
}
=count



/// range is [start_inclusive  end_exclusive]
/// return the subrange, or empty array if the range.start >=range.end
;public function(list :list(:any)  range :list(:i64))(:array) {
    {0-1}=i;
    range #1 - {range#0}
    =length <= 0
    |branch {[]} {
        length
        |new_array
        |replace(e) {
            i +1 =>i;
            list #{i + {range#0 }}
        }
    }
}
=subrange;
"this is my long str"
|subrange [8 15]
|assert/array_eq "my long"

;public function(list :list  to_find)(:or(index :i64 if_not_found :nothing)) {
    list |size
    |times_or(i) {
        list #i =?to_find
        |branch {
            i
        } {
        }
    } {
    }
}
=find

;"asdfqwer"
|{'z' |find}
|assert/eq {}

;"asdfqwer"
|{'q' |find}
|assert/eq 4

;public function (index_and_value) {
    function(list) {
        ;index_and_value #0 =index
        ;index_and_value #1 =value
        ;0 -1 =i
        ;list
        |replace(e) {
            i +1 =>i =?index |branch {
                value
            } {
                e
            }
        }
    }
}
=set_array_elem
;"asdf"
|{[1 'q'] |set_array_elem}
|assert/array_eq "aqdf"

;public function (elems :list  index :i64  value) {
    ;0 -1 =i
    ;elems
    |replace(e) {
        i +1 =>i =?index |branch {
            value
        } {
            e
        }
    }
}
=set_array_elem2
;"asdf"
|set_array_elem 1 'q'
|assert/array_eq "aqdf"


;public function(list sep) {
    ;list |count sep
    +1
    |new_array
    =parts
    ;0 =found
    ;0 =previous
    ;list |size
    |times_or(i) {
        list #i =?sep
        |branch {
            list |subrange [previous i] =part;
            parts |{[found part] |set_array_elem};
            i +1 =>previous;
            found +1 => found;
        } {
        }
    } {
        list |subrange [previous {list |size}] =part;
        parts |{[found part] |set_array_elem};
    }
    ;parts
}
=split_by

;"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
|split_by ':'
|inspect(r) {
    #0
    |assert/array_eq "Game 1"
}
|inspect(r) {
    #1
    |assert/array_eq " 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
}

;"3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
|split_by ';'
|inspect(r) {
    #0
    |assert/array_eq "3 blue, 4 red"
}
|inspect(r) {
    #1
    |assert/array_eq " 1 red, 2 green, 6 blue"
}
|inspect(r) {
    #2
    |assert/array_eq " 2 green"
}


;public function(list) {
    ;0 =i
    ;0 =past_start_space
    ;0 =past_end_space
    ;list |browse_or(e) {
        e =? ' ' |branch {
            past_start_space =? 0 |branch {
                i +1 =>i;
            } {
            }
        } {
            1 =>past_start_space
        }
        ;
    } {
        list
    }
    |subrange [i {list |size}]
    =start_trimmed
    |size =end
    |times(k) {
        start_trimmed #{start_trimmed |size -k -1} =?' ' |branch {
            past_end_space =?0 |branch {
                end -1 =>end;
            } {
            }
        } {
            1 =>past_end_space;
        }
    }
    ;start_trimmed |subrange [0 end]
}
=trim
;"   as df   "
|trim
|assert/array_eq "as df"




;public function(expected) {
    function(actual) {
        actual |size =? {expected |size}
        |branch {
            {0 -1} =i
            ;actual
            |browse_or(actual_elem) {
                i +1 => i
                ;expected #i
                =expected_elem
                =?actual_elem
                |branch {
                } {
                    0
                }
            } {
                1
            }
        } {
            0
        }
    }
}
=array_eq
;"asdf"
|{"asdf" |array_eq}
|assert/eq 1
;"asdf"
|{"qwer" |array_eq}
|assert/eq 0


;public function(array) {
    0
    =result
    ;array
    |browse(x) {
        result +x => result
        ;
    }
    ;result
}
=sum


;public function(nested :list(:list)) {
    ;[] =accum
    ;nested
    |browse_or(inner) {
        accum ++inner => accum;
    } {
        accum
    }
}
=flatten

;public function(list :list) {
    0 -1 =i;
    list |size +2 |new_array |replace(e) {
        i +1 =>i;
        i =? 0 |branch { '"' } {
            i =? {list |size +1} |branch { '"' } {
                list #{i -1}
            }
        }
    }
}
=quote

;
