
// this is how you define a custom type from a struct
;public tuple(x :i64  y :i64)
=point

/// a function can return custom types
;function (a :i64)(:point) {
    [a a]
    |cast(:any) // sadly, to construct tuples you have to cast them.
}
=diagonal

;5 |diagonal
=d


// a function can take custom types
;function(p :point) {
    ;"x: " ++{p .x |to_str} |print
    ;"y: " ++{p .y |to_str} |print
    ;
}
=print_point

;d |print_point


// a function can return anonymous structs
;function()(:tuple(x :i64  y :i64  z :i64)) {
    [1 2 3] |cast(:any)
}
=vector3d

;"z: " ++{{} |vector3d .z |to_str} |print


// a function can take anonymous structs
;function(t :tuple(a :i64  b :i64)) {
    "a: " ++{t .a |to_str} |print
}
=print_first
;[8 9] |cast(:any) |print_first


// you can access a field of the first anonymous parameter
;function(:point) {
    .x
}
=get_first
;[6 7] |cast(:any) |get_first |to_str |print


// identifiers (including types like 'point') are available inside evaluated strings,
// but at the moment need to be fully-qualified (like 'structs/point', where 'structs' is the current filename)
;public function(x){+100} =plus_100
;"[26 27] |cast(:any) |function(:structs/point) {.x} |structs/plus_100 |to_str |print" |eval

;5
